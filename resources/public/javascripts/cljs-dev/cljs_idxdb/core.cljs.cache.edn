;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name cljs-idxdb.core, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {make-range {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 70, :column 7, :end-line 70, :end-column 17, :arglists (quote ([only] [lower? bound open?] [lower upper open-lower? open-upper?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([only] [lower? bound open?] [lower upper open-lower? open-upper?]), :arglists ([only] [lower? bound open?] [lower upper open-lower? open-upper?]), :arglists-meta (nil nil nil)}}, :name cljs-idxdb.core/make-range, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([only] [lower? bound open?] [lower upper open-lower? open-upper?]), :arglists ([only] [lower? bound open?] [lower upper open-lower? open-upper?]), :arglists-meta (nil nil nil)}, :method-params ([only] [lower? bound open?] [lower upper open-lower? open-upper?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 4, :fn-var true, :arglists ([only] [lower? bound open?] [lower upper open-lower? open-upper?])}, create-store {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 26, :column 7, :end-line 26, :end-column 19, :arglists (quote ([db name opts]))}, :name cljs-idxdb.core/create-store, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 19, :method-params ([db name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db name opts]))}, pprint {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 5, :column 7, :end-line 5, :end-column 13, :arglists (quote ([o]))}, :name cljs-idxdb.core/pprint, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 13, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, log {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 8, :column 7, :end-line 8, :end-column 10, :arglists (quote ([v & text])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(v text)], :arglists ([v & text]), :arglists-meta (nil)}}, :name cljs-idxdb.core/log, :variadic true, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(v text)], :arglists ([v & text]), :arglists-meta (nil)}, :method-params [(v text)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists ([v & text])}, make-rec-acc-fn {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 50, :column 7, :end-line 50, :end-column 22, :arglists (quote ([acc request success-fn]))}, :name cljs-idxdb.core/make-rec-acc-fn, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 22, :method-params ([acc request success-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([acc request success-fn]))}, make-tx {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 60, :column 7, :end-line 60, :end-column 14, :arglists (quote ([db store-name] [db store-name readwrite?])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([db store-name] [db store-name readwrite?]), :arglists ([db store-name] [db store-name readwrite?]), :arglists-meta (nil nil)}}, :name cljs-idxdb.core/make-tx, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([db store-name] [db store-name readwrite?]), :arglists ([db store-name] [db store-name readwrite?]), :arglists-meta (nil nil)}, :method-params ([db store-name] [db store-name readwrite?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists ([db store-name] [db store-name readwrite?])}, create-db {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([name version upgrade-fn success-fn]))}, :name cljs-idxdb.core/create-db, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 16, :method-params ([name version upgrade-fn success-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 4, :fn-var true, :arglists (quote ([name version upgrade-fn success-fn]))}, get-target-result {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 15, :column 7, :end-line 15, :end-column 24, :arglists (quote ([e]))}, :name cljs-idxdb.core/get-target-result, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 24, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, get-tx-store {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([db store-name]))}, :name cljs-idxdb.core/get-tx-store, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 19, :method-params ([db store-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db store-name]))}, add-item {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 42, :column 7, :end-line 42, :end-column 15, :arglists (quote ([db store-name item success-fn]))}, :name cljs-idxdb.core/add-item, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 15, :method-params ([db store-name item success-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists (quote ([db store-name item success-fn]))}, error-callback {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([e]))}, :name cljs-idxdb.core/error-callback, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 21, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, get-by-key {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 96, :column 7, :end-line 96, :end-column 17, :arglists (quote ([db store-name key success-fn]))}, :name cljs-idxdb.core/get-by-key, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 17, :method-params ([db store-name key success-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 4, :fn-var true, :arglists (quote ([db store-name key success-fn]))}, get-by-index {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 102, :column 7, :end-line 102, :end-column 19, :arglists (quote ([db store-name index-name initial-key success-fn]))}, :name cljs-idxdb.core/get-by-index, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 19, :method-params ([db store-name index-name initial-key success-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 5, :fn-var true, :arglists (quote ([db store-name index-name initial-key success-fn]))}, open-cursor {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 80, :column 7, :end-line 80, :end-column 18, :arglists (quote ([store-or-index range]))}, :name cljs-idxdb.core/open-cursor, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 18, :method-params ([store-or-index range]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store-or-index range]))}, create-index {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([store name field opts]))}, :name cljs-idxdb.core/create-index, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 19, :method-params ([store name field opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 4, :fn-var true, :arglists (quote ([store name field opts]))}, delete-and-create-store {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 29, :column 7, :end-line 29, :end-column 30, :arglists (quote ([db name opts]))}, :name cljs-idxdb.core/delete-and-create-store, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 30, :method-params ([db name opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists (quote ([db name opts]))}, get-all {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 86, :column 7, :end-line 86, :end-column 14, :arglists (quote ([db store-name success-fn] [db store-name initial-key success-fn])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([db store-name success-fn] [db store-name initial-key success-fn]), :arglists ([db store-name success-fn] [db store-name initial-key success-fn]), :arglists-meta (nil nil)}}, :name cljs-idxdb.core/get-all, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([db store-name success-fn] [db store-name initial-key success-fn]), :arglists ([db store-name success-fn] [db store-name initial-key success-fn]), :arglists-meta (nil nil)}, :method-params ([db store-name success-fn] [db store-name initial-key success-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 4, :fn-var true, :arglists ([db store-name success-fn] [db store-name initial-key success-fn])}, get-index {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 83, :column 7, :end-line 83, :end-column 16, :arglists (quote ([store index-name]))}, :name cljs-idxdb.core/get-index, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 16, :method-params ([store index-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store index-name]))}, delete-store {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([db name]))}, :name cljs-idxdb.core/delete-store, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\cljs_idxdb\\core.cljs", :end-column 19, :method-params ([db name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db name]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:keywordize-keys}, :order [:keywordize-keys]}, :doc nil}