;; Analyzed by ClojureScript 1.8.51
{:use-macros {extends-protocol tailrecursion.cljson}, :excludes #{}, :name tailrecursion.cljson, :imports nil, :requires {reader cljs.reader, cljs.reader cljs.reader, date goog.date.DateTime, goog.date.DateTime goog.date.DateTime, clojure.string clojure.string}, :uses {*default-data-reader-fn* cljs.reader, *tag-table* cljs.reader, split clojure.string}, :defs {encode {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 53, :column 7, :end-line 53, :end-column 13, :arglists (quote ([x]))}, :name tailrecursion.cljson/encode, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, decode {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 96, :column 7, :end-line 96, :end-column 13, :arglists (quote ([v]))}, :name tailrecursion.cljson/decode, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, EncodeTagged {:meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 11, :column 14, :end-line 11, :end-column 26, :doc "Encode a cljs thing o as a JS tagged literal of the form {tag: value}, where\n  value is composed of JS objects that can be encoded as JSON.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-encode [[o]]}}}, :protocol-symbol true, :name tailrecursion.cljson/EncodeTagged, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 26, :column 1, :line 11, :protocol-info {:methods {-encode [[o]]}}, :info nil, :end-line 11, :impls #{js/Date cljs/core.UUID}, :doc "Encode a cljs thing o as a JS tagged literal of the form {tag: value}, where\n  value is composed of JS objects that can be encoded as JSON.", :jsdoc ("@interface")}, -encode {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 14, :column 4, :end-line 14, :end-column 11, :protocol tailrecursion.cljson/EncodeTagged, :doc nil, :arglists (quote ([o]))}, :protocol tailrecursion.cljson/EncodeTagged, :name tailrecursion.cljson/-encode, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 11, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc nil}, clj->cljson {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 16, :column 7, :end-line 16, :end-column 18, :arglists (quote ([v])), :doc "Convert clj data to JSON string."}, :name tailrecursion.cljson/clj->cljson, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Convert clj data to JSON string."}, cljson->clj {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([s])), :doc "Convert JSON string to clj data."}, :name tailrecursion.cljson/cljson->clj, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Convert JSON string to clj data."}, enc-coll {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 28, :column 7, :end-line 28, :end-column 15, :arglists (quote ([tag val]))}, :name tailrecursion.cljson/enc-coll, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 15, :method-params ([tag val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag val]))}, interpret {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 44, :column 7, :end-line 44, :end-column 16, :arglists (quote ([x])), :doc "Attempts to encode an object that does not satisfy EncodeTagged,\n  but for which the printed representation contains a tag."}, :name tailrecursion.cljson/interpret, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Attempts to encode an object that does not satisfy EncodeTagged,\n  but for which the printed representation contains a tag."}, decode-tagged {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\testindexdb\\resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :line 68, :column 7, :end-line 68, :end-column 20, :arglists (quote ([o]))}, :name tailrecursion.cljson/decode-tagged, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\tailrecursion\\cljson.cljs", :end-column 20, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}}, :require-macros {tailrecursion.cljson tailrecursion.cljson}, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}