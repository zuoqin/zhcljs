;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name alandipert.storage-atom, :imports nil, :requires {tailrecursion.cljson tailrecursion.cljson, timer goog.Timer, goog.Timer goog.Timer}, :uses {cljson->clj tailrecursion.cljson, clj->cljson tailrecursion.cljson}, :defs {load-session-storage {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 95, :column 7, :end-line 95, :end-column 27, :arglists (quote ([k]))}, :name alandipert.storage-atom/load-session-storage, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 27, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, ->StorageBackend {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 10, :column 10, :end-line 10, :end-column 24, :protocols #{alandipert.storage-atom/IStorageBackend}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([store key]))}, :protocols #{alandipert.storage-atom/IStorageBackend}, :name alandipert.storage-atom/->StorageBackend, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 24, :method-params ([store key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([store key])), :skip-protocol-flag nil}, local-storage {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 105, :column 7, :end-line 105, :end-column 20, :arglists (quote ([atom k]))}, :name alandipert.storage-atom/local-storage, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 20, :method-params ([atom k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([atom k]))}, storage-delay {:name alandipert.storage-atom/storage-delay, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 30, :column 1, :end-line 30, :end-column 19, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 30, :column 6, :end-line 30, :end-column 19}, :doc "Delay in ms before a change is committed to the local storage. If a\nnew change occurs before the time is elapsed, the old change is\ndiscarded an only the new one is committed."}, -get {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 7, :column 4, :end-line 7, :end-column 8, :protocol alandipert.storage-atom/IStorageBackend, :doc nil, :arglists (quote ([this not-found]))}, :protocol alandipert.storage-atom/IStorageBackend, :name alandipert.storage-atom/-get, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 8, :method-params ([this not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this not-found])), :doc nil}, remove-local-storage! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 136, :column 7, :end-line 136, :end-column 28, :arglists (quote ([k]))}, :name alandipert.storage-atom/remove-local-storage!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 28, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, link-storage {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 69, :column 7, :end-line 69, :end-column 19, :arglists (quote ([atom storage k]))}, :name alandipert.storage-atom/link-storage, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 19, :method-params ([atom storage k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 3, :fn-var true, :arglists (quote ([atom storage k]))}, store {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 41, :column 7, :end-line 41, :end-column 12, :arglists (quote ([atom backend]))}, :name alandipert.storage-atom/store, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 12, :method-params ([atom backend]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([atom backend]))}, remove-html-storage! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 128, :column 7, :end-line 128, :end-column 27, :arglists (quote ([storage k])), :doc "Remove key from storage and also trigger an event on the current\n  window so its atoms will be cleared as well."}, :name alandipert.storage-atom/remove-html-storage!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 27, :method-params ([storage k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([storage k])), :doc "Remove key from storage and also trigger an event on the current\n  window so its atoms will be cleared as well."}, maybe-update-backend {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 56, :column 7, :end-line 56, :end-column 27, :arglists (quote ([atom storage k default e]))}, :name alandipert.storage-atom/maybe-update-backend, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 27, :method-params ([atom storage k default e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 5, :fn-var true, :arglists (quote ([atom storage k default e]))}, clear-html-storage! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 115, :column 7, :end-line 115, :end-column 26, :arglists (quote ([storage])), :doc "Clear storage and also trigger an event on the current window\n  so its atoms will be cleared as well."}, :name alandipert.storage-atom/clear-html-storage!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 26, :method-params ([storage]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([storage])), :doc "Clear storage and also trigger an event on the current window\n  so its atoms will be cleared as well."}, clear-local-storage! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 122, :column 7, :end-line 122, :end-column 27, :arglists (quote ([]))}, :name alandipert.storage-atom/clear-local-storage!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *storage-delay* {:name alandipert.storage-atom/*storage-delay*, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 36, :column 1, :end-line 36, :end-column 31, :dynamic true, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 36, :column 16, :end-line 36, :end-column 31, :dynamic true}}, *watch-active* {:name alandipert.storage-atom/*watch-active*, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 38, :column 1, :end-line 38, :end-column 30, :dynamic true, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 38, :column 16, :end-line 38, :end-column 30, :dynamic true}}, load-html-storage {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 88, :column 7, :end-line 88, :end-column 24, :arglists (quote ([storage k]))}, :name alandipert.storage-atom/load-html-storage, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 24, :method-params ([storage k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([storage k]))}, html-storage {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 100, :column 7, :end-line 100, :end-column 19, :arglists (quote ([atom storage k]))}, :name alandipert.storage-atom/html-storage, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 19, :method-params ([atom storage k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 3, :fn-var true, :arglists (quote ([atom storage k]))}, load-local-storage {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 92, :column 7, :end-line 92, :end-column 25, :arglists (quote ([k]))}, :name alandipert.storage-atom/load-local-storage, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 25, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, StorageBackend {:num-fields 2, :protocols #{alandipert.storage-atom/IStorageBackend}, :name alandipert.storage-atom/StorageBackend, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 24, :type true, :column 10, :line 10, :record false, :end-line 10, :skip-protocol-flag nil}, remove-session-storage! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 139, :column 7, :end-line 139, :end-column 30, :arglists (quote ([k]))}, :name alandipert.storage-atom/remove-session-storage!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 30, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, clear-session-storage! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 125, :column 7, :end-line 125, :end-column 29, :arglists (quote ([]))}, :name alandipert.storage-atom/clear-session-storage!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, session-storage {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 109, :column 7, :end-line 109, :end-column 22, :arglists (quote ([atom k]))}, :name alandipert.storage-atom/session-storage, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 22, :method-params ([atom k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([atom k]))}, IStorageBackend {:meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 5, :column 14, :end-line 5, :end-column 29, :doc "Represents a storage resource.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-get [[this not-found]], -commit! [[this value]]}}}, :protocol-symbol true, :name alandipert.storage-atom/IStorageBackend, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 29, :column 1, :line 5, :protocol-info {:methods {-get [[this not-found]], -commit! [[this value]]}}, :info nil, :end-line 5, :impls #{alandipert.storage-atom/StorageBackend}, :doc "Represents a storage resource.", :jsdoc ("@interface")}, debounce-factory {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 20, :column 7, :end-line 20, :end-column 23, :arglists (quote ([])), :doc "Return a function that will always store a future call into the\n  same atom. If recalled before the time is elapsed, the call is\n  replaced without being executed."}, :name alandipert.storage-atom/debounce-factory, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Return a function that will always store a future call into the\n  same atom. If recalled before the time is elapsed, the call is\n  replaced without being executed."}, -commit! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 8, :column 4, :end-line 8, :end-column 12, :protocol alandipert.storage-atom/IStorageBackend, :doc "Commit value to storage at location.", :arglists (quote ([this value]))}, :protocol alandipert.storage-atom/IStorageBackend, :name alandipert.storage-atom/-commit!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 12, :method-params ([this value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this value])), :doc "Commit value to storage at location."}, dispatch-remove-event! {:protocol-inline nil, :meta {:file "E:\\DEV\\clojure\\clojurescript\\zhcljs\\resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :line 75, :column 7, :end-line 75, :end-column 29, :arglists (quote ([storage key])), :doc "Create and dispatch a synthetic StorageEvent. Expects key to be a string.\n  An empty key indicates that all storage is being cleared."}, :name alandipert.storage-atom/dispatch-remove-event!, :variadic false, :file "resources\\public\\javascripts\\cljs-dev\\alandipert\\storage_atom.cljs", :end-column 29, :method-params ([storage key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([storage key])), :doc "Create and dispatch a synthetic StorageEvent. Expects key to be a string.\n  An empty key indicates that all storage is being cleared."}}, :require-macros {tailrecursion.cljson tailrecursion.cljson}, :cljs.analyzer/constants {:seen #{:alandipert.storage-atom/none key store :alandipert.storage-atom/storage-watch}, :order [store key :alandipert.storage-atom/none :alandipert.storage-atom/storage-watch]}, :doc nil}